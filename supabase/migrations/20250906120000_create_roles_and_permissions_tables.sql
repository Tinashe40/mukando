-- Location: supabase/migrations/20250906120000_create_roles_and_permissions_tables.sql
-- Description: Creates roles and permissions tables for a more robust RBAC system.

-- 1. Create roles Table
CREATE TABLE public.roles (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name TEXT NOT NULL UNIQUE,
    description TEXT,
    created_at TIMESTAMPTZ DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMPTZ DEFAULT CURRENT_TIMESTAMP
);

-- 2. Create permissions Table
CREATE TABLE public.permissions (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name TEXT NOT NULL UNIQUE,
    description TEXT,
    created_at TIMESTAMPTZ DEFAULT CURRENT_TIMESTAMP
);

-- 3. Create role_permissions Table
CREATE TABLE public.role_permissions (
    role_id BIGINT NOT NULL REFERENCES public.roles(id) ON DELETE CASCADE,
    permission_id BIGINT NOT NULL REFERENCES public.permissions(id) ON DELETE CASCADE,
    PRIMARY KEY (role_id, permission_id)
);

-- 4. Insert default roles
INSERT INTO public.roles (name, description) VALUES
('admin', 'Administrator with full access'),
('member', 'Standard user with basic access'),
('group_leader', 'User with additional permissions to manage a group');

-- 5. Insert default permissions
INSERT INTO public.permissions (name, description) VALUES
-- User Permissions
('users:read', 'Read user profiles'),
('users:write', 'Create/update user profiles'),
-- Group Permissions
('groups:read', 'Read group information'),
('groups:write', 'Create/update group information'),
-- Loan Permissions
('loans:read', 'Read loan information'),
('loans:write', 'Create/update loan information'),
-- Contribution Permissions
('contributions:read', 'Read contribution information'),
('contributions:write', 'Create/update contribution information');

-- 6. Assign permissions to roles
-- Admin Permissions
INSERT INTO public.role_permissions (role_id, permission_id)
SELECT r.id, p.id
FROM public.roles r, public.permissions p
WHERE r.name = 'admin';

-- Member Permissions
INSERT INTO public.role_permissions (role_id, permission_id)
SELECT r.id, p.id
FROM public.roles r, public.permissions p
WHERE r.name = 'member' AND p.name IN ('users:read', 'groups:read', 'loans:read', 'contributions:read', 'contributions:write');

-- Group Leader Permissions
INSERT INTO public.role_permissions (role_id, permission_id)
SELECT r.id, p.id
FROM public.roles r, public.permissions p
WHERE r.name = 'group_leader' AND p.name IN ('users:read', 'groups:read', 'groups:write', 'loans:read', 'loans:write', 'contributions:read', 'contributions:write');

-- 7. Add role_id to user_profiles table
ALTER TABLE public.user_profiles
ADD COLUMN role_id BIGINT REFERENCES public.roles(id);

-- 8. Update existing users with default role
UPDATE public.user_profiles
SET role_id = (SELECT id FROM public.roles WHERE name = 'member')
WHERE role_id IS NULL;

-- 9. Remove the old role column
ALTER TABLE public.user_profiles
DROP COLUMN role;

-- 10. Drop the old user_role enum
DROP TYPE public.user_role;
